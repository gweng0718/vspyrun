import os
import sys

def kpts_scf(*, kcen="Gamma", nx="8", ny="8", nz="8"):
    content = f"""
uniform k-point mesh
0
{kcen}
{nx} {ny} {nz}
0 0 0
"""
        # sanity check
    int(nx); int(ny); int(nz)
    return content

def kpts_bs_split(*, inkpts="KPOINTS", outdir="./", nkpts=101):
    """
    Splits a line-mode KPATH file into multiple K1, K2, ... files.
    """

    if not os.path.isfile(inkpts):
        sys.exit(f"{inkpts} file does not exist")

    with open(inkpts, 'r', encoding='utf-8', errors='ignore') as f:
        lines = f.readlines()

    # Strip trailing newline but preserve leading indentation on heading lines if you want
    lines = [ln.rstrip('\n') for ln in lines]

    if len(lines) < 4:
        print("Error: file has fewer than 4 lines for the heading.")
        sys.exit(1)

    # Extract the 4 heading lines
    heading = lines[:4]

    # Overwrite line 1 with your specified npoints (with leading spaces if you like)
    heading[1] = f"   {nkpts}"
    # Overwrite line 0 with my own script
    heading[0] = "K-Path Generated by Path-splitter"

    # The rest of the lines are the body
    body_lines = lines[4:]

    # Collect non-blank lines into pairs
    k_lines = []
    for ln in body_lines:
        if ln.strip():   # If not an empty line
            k_lines.append(ln)

    # We expect 2 lines per block
    if len(k_lines) % 2 != 0:
        print("Warning: The number of non-blank lines after heading is not divisible by 2.")
    num_blocks = len(k_lines) // 2

    print(f"Found {num_blocks} line-mode segments. Creating K1..K{num_blocks}.")

    # For each block, write a new file K1, K2, ...
    os.makedirs(outdir, exist_ok=True)
    for i in range(num_blocks):
        lineA = k_lines[2*i]
        lineB = k_lines[2*i + 1]

        outname = f"K{i+1}"
        outfile = os.path.join(outdir, outname)
        with open(outfile, 'w', encoding='utf-8') as fout:
            # Write the 4-line heading
            for hl in heading:
                fout.write(hl + "\n")

            # Then the 2 lines for this segment
            fout.write(lineA + "\n")
            fout.write(lineB + "\n")

        print(f"Wrote segment {i+1} -> '{outfile}'")
